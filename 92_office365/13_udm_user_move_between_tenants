#!/usr/share/ucs-test/runner python
## -*- coding: utf-8 -*-
## desc: create a user with udm for one tenant and then change the tenant
## tags: [apptest]
## exposure: dangerous
## packages:
##   - univention-office365

import time
import copy

import univention.testing.ucr as ucr_test
import univention.testing.udm as udm_test
import univention.testing.utils as utils

from helpers.office365_test_helpers import listener_attributes_data, udm_user_args, check_udm2azure_user, setup_logging
from univention.office365.listener import Office365Listener
from univention.office365.azure_auth import AzureAuth, AzureTenantHandler
from univention.office365.azure_handler import ResourceNotFoundError


logger = setup_logging()
tenant_aliases = AzureTenantHandler.get_tenant_aliases()
initialized_tenants = [tenant_alias for tenant_alias in tenant_aliases if AzureAuth.is_initialized(tenant_alias)]

print("*** tenant_aliases={!r}.".format(tenant_aliases))
print("*** initialized_tenants={!r}.".format(initialized_tenants))

if len(initialized_tenants) < 2:
	utils.fail('Need at least two initialized tenants for this test.')

with udm_test.UCSTestUDM() as udm:
	with ucr_test.UCSTestConfigRegistry() as ucr:
		ucr.load()
		class _listener(object):
			configRegistry = ucr

		tenant_alias1 = initialized_tenants[0]
		tenant_alias2 = initialized_tenants[1]
		if len(initialized_tenants) > 2:
			tenant_alias3 = initialized_tenants[2]
		else:
			tenant_alias3 = initialized_tenants[0]

		print("*** tenant_alias1={!r}".format(tenant_alias1))
		print("*** tenant_alias2={!r}".format(tenant_alias2))
		print("*** tenant_alias3={!r}".format(tenant_alias3))

		ol = Office365Listener(_listener(), "ucs-test", listener_attributes_data, {}, "dn", tenant_alias1)

		user_args = udm_user_args(ucr, minimal=True)
		user_args["set"]["UniventionOffice365Enabled"] = 1
		user_args["set"]["UniventionOffice365ADConnectionAlias"] = tenant_alias1

		print("*** Creating user with tenant_alias1 ({!r})...".format(tenant_alias1))
		user_dn, username = udm.create_user(check_for_drs_replication=True, **user_args)
		time.sleep(5)

		print("*** Checking that user was created (UniventionOffice365ObjectID in UDM object)...")
		udm_user = ol.udm.get_udm_user(user_dn)
		azure_user_id1 = udm_user.get("UniventionOffice365ObjectID")
		if not azure_user_id1:
			utils.fail("User was not created properly (no UniventionOffice365ObjectID).")

		print("*** Checking sync of user properties...")
		fake_listener_new = dict(
			entryUUID=[udm_user.dn],
			univentionOffice365ObjectID=[azure_user_id1],
			univentionOffice365ADConnectionAlias=[tenant_alias1],
		)
		azure_user = ol.get_user(fake_listener_new)
		success, errors = check_udm2azure_user(user_args, azure_user, complete=False)
		if success:
			print("*** attributes were synced correctly for tenant_alias={!r}".format(tenant_alias1))
		else:
			utils.fail("One or more properties were not synced correctly for tenant_alias1={!r}:\n{}".format("\n".join(map(str, errors)), tenant_alias1))

		# 1 -> 2

		print("*** Changing UniventionOffice365ADConnectionAlias property from tenant_alias1 ({!r}) to tenant_alias2 ({!r})...".format(tenant_alias1, tenant_alias2))
		user_args2 = dict(set=dict(UniventionOffice365ADConnectionAlias=tenant_alias2), append=dict())
		udm.modify_object(modulename="users/user", dn=user_dn, **user_args2)
		time.sleep(5)

		print("*** Checking that user was deleted in old tenant...")
		try:
			deleted_user = ol.ah.list_users(objectid=azure_user["objectId"])
			if deleted_user["accountEnabled"]:
				utils.fail("User was not deleted.")
			else:
				print("OK: user was deleted.")
		except ResourceNotFoundError:
			print("OK: user was deleted.")

		print("*** Checking that user was created in new tenant (2) (UniventionOffice365ObjectID must differ)...")
		ol = Office365Listener(_listener(), "ucs-test", listener_attributes_data, {}, "dn", tenant_alias2)
		udm_user = ol.udm.get_udm_user(user_dn)
		azure_user_id2 = udm_user.get("UniventionOffice365ObjectID")
		if not azure_user_id2:
			utils.fail("User was not created properly (no UniventionOffice365ObjectID).")
		if azure_user_id1 == azure_user_id2:
			utils.fail("UniventionOffice365ObjectID did not change.")

		print("*** Checking sync of user properties (to tenant_alias2)...")
		fake_listener_new2 = dict(
			entryUUID=[udm_user.dn],
			univentionOffice365ObjectID=[azure_user_id2],
			univentionOffice365ADConnectionAlias=[tenant_alias2],
		)
		azure_user2 = ol.get_user(fake_listener_new2)
		user_args2 = copy.deepcopy(user_args)
		user_args2["set"]["UniventionOffice365ADConnectionAlias"] = tenant_alias2
		success, errors = check_udm2azure_user(user_args2, azure_user2, complete=False)
		if success:
			print("*** attributes were synced correctly for tenant_alias2={!r}".format(tenant_alias2))
		else:
			utils.fail("One or more properties were not synced correctly for tenant_alias2={!r}:\n{}".format("\n".join(map(str, errors)), tenant_alias2))

		# 2 -> 3

		print("*** Changing UniventionOffice365ADConnectionAlias property from tenant_alias2 ({!r}) to tenant_alias3 ({!r})...".format(tenant_alias2, tenant_alias3))
		user_args3 = dict(set=dict(UniventionOffice365ADConnectionAlias=tenant_alias3), append=dict())
		udm.modify_object(modulename="users/user", dn=user_dn, **user_args3)
		time.sleep(5)

		print("*** Checking that user was deleted in old tenant...")
		try:
			deleted_user = ol.ah.list_users(objectid=azure_user["objectId"])
			if deleted_user["accountEnabled"]:
				utils.fail("User was not deleted.")
			else:
				print("OK: user was deleted.")
		except ResourceNotFoundError:
			print("OK: user was deleted.")

		print("*** Checking that user was created in new tenant (3) (UniventionOffice365ObjectID must differ)...")
		ol = Office365Listener(_listener(), "ucs-test", listener_attributes_data, {}, "dn", tenant_alias3)
		udm_user = ol.udm.get_udm_user(user_dn)
		azure_user_id3 = udm_user.get("UniventionOffice365ObjectID")
		if not azure_user_id3:
			utils.fail("User was not created properly (no UniventionOffice365ObjectID).")
		if azure_user_id2 == azure_user_id3:
			utils.fail("UniventionOffice365ObjectID did not change.")

		print("*** Checking sync of user properties (to tenant_alias3)...")
		fake_listener_new3 = dict(
			entryUUID=[udm_user.dn],
			univentionOffice365ObjectID=[azure_user_id3],
			univentionOffice365ADConnectionAlias=[tenant_alias3],
		)
		azure_user3 = ol.get_user(fake_listener_new3)
		user_args3 = copy.deepcopy(user_args2)
		user_args3["set"]["UniventionOffice365ADConnectionAlias"] = tenant_alias3
		success, errors = check_udm2azure_user(user_args3, azure_user3, complete=False)
		if success:
			print("*** attributes were synced correctly for tenant_alias3={!r}".format(tenant_alias3))
		else:
			utils.fail("One or more properties were not synced correctly for tenant_alias3={!r}:\n{}".format("\n".join(map(str, errors)), tenant_alias3))
