#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-
#
# Univention Office 365 - migration script
#
# Copyright 2017 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

import os
import pwd
import sys
import stat
import json
import shutil
import argparse
import subprocess
import univention.admin.uldap
from univention.config_registry import ConfigRegistry, handler_set
from univention.office365.azure_auth import AzureAuth, get_adconnection_aliases, adconnection_alias_ucrv
from univention.office365.udm_helper import UDMHelper


conf_path = '/etc/univention-office365'
ucr = ConfigRegistry()
ucr.load()

if __name__ == '__main__':
	parser = argparse.ArgumentParser(description='Migrate a single Azure AD Office 365 connector setup to a multi-connection setup.')
	parser.add_argument('adconnection_alias', help='Value to be written to user attribute. Must not be listed in UCR {}.'.format(adconnection_alias_ucrv))
	parser.add_argument('--dryrun', help='Simulate the migration, but don\'t actually change anything [default off].', action='store_true')
	args = parser.parse_args()

	if not AzureAuth.is_initialized():
		print('Error: Default Azure AD connection (in {!r}) is not initialized. Exiting.'.format(conf_path))
		sys.exit(1)

	aliases = get_adconnection_aliases()
	if args.adconnection_alias in aliases:
		print('Error: Azure AD connection alias {!r} is already listed in UCR {!r}. Exiting.'.format(args.adconnection_alias, adconnection_alias_ucrv))
		sys.exit(1)

	target_path = os.path.join(conf_path, args.adconnection_alias)
	if os.path.exists(target_path):
		print('Error: Path {!r} already exists. Exiting.'.format(target_path))
		sys.exit(1)

	if args.dryrun:
		print('Dry run - no changes will be applied.')

	print('Creating directory {!r}...'.format(target_path))
	if not args.dryrun:
		os.mkdir(target_path, 0o700)
	print('Setting permissions on {!r}...'.format(target_path))
	if not args.dryrun:
		os.chown(target_path, pwd.getpwnam('listener').pw_uid, 0)
	for filename in ('cert.fp', 'cert.pem', 'key.pem'):
		src = os.path.join(conf_path, filename)
		print('Copying {!r} to {!r}...'.format(src, target_path))
		if not args.dryrun:
			shutil.copy2(src, target_path)
			os.chown(os.path.join(target_path, filename), pwd.getpwnam('listener').pw_uid, 0)
			os.chmod(os.path.join(target_path, filename), stat.S_IRUSR)
	for filename in ('ids.json', 'manifest.json', 'token.json'):
		src = os.path.join(conf_path, filename)
		print('Moving {!r} to {!r}...'.format(src, target_path))
		if not args.dryrun:
			shutil.move(src, target_path)
			os.chown(os.path.join(target_path, filename), pwd.getpwnam('listener').pw_uid, 0)
			os.chmod(os.path.join(target_path, filename), stat.S_IRUSR | stat.S_IWUSR)

	if args.dryrun or AzureAuth.is_initialized(args.adconnection_alias):
		print('OK: Azure AD connection {!r} is now initialized.'.format(args.adconnection_alias))
	else:
		print('Error: Azure AD connection {!r} is not initialized after copying. Exiting.'.format(args.adconnection_alias))
		sys.exit(1)

	print('Searching for users to migrate in LDAP...')
	users = UDMHelper.get_lo_o365_users(
		attributes=['uid', 'univentionOffice365Enabled', 'univentionOffice365ObjectID', 'ucsschoolSchool'],
		enabled='',
		additional_filter='(!(univentionOffice365ADConnectionAlias=*))'
	)
	print('Found the following users:\n')
	print('       username      | enabled |  schools   | Azure object ID')
	print('-' * 82)
	for dn in sorted(users.keys()):
		attr = users[dn]
		print('{: <20} |    {}    | {: <10} | {}'.format(
			attr['uid'][0],
			'x' if attr['univentionOffice365Enabled'][0] == '1' and attr['uid'][0] != 'test3abx' else ' ',
			attr.get('ucsschoolSchool', [''])[0],
			attr['univentionOffice365ObjectID'][0])
		)
	if users:
		print('\nSetting the Azure AD connection alias of those users to {!r}...\n'.format(args.adconnection_alias))
		lo, po = univention.admin.uldap.getAdminConnection()
		for dn in sorted(users.keys()):
			attr = users[dn]
			print('Changing {} ({})...'.format(attr['uid'][0], dn))
			if not args.dryrun:
				lo.modify(dn, [('univentionOffice365ADConnectionAlias', None, args.adconnection_alias)])
	else:
		print('No users found.')
	print('Finished migrating users.\n')

	groups = UDMHelper.get_lo_o365_groups(
		attributes=['cn', 'univentionOffice365ObjectID'],
		additional_filter='(!(univentionOffice365ADConnectionAlias=*))'
	)
	print('Found the following groups:\n')
	print('           group name          | Azure object ID')
	print('-' * 69)
	for dn in sorted(groups.keys()):
		attr = groups[dn]
		print('{: <30} | {}'.format(
			attr['cn'][0],
			attr['univentionOffice365ObjectID'][0])
		)
	if groups:
		print('\nSetting the Azure AD connection alias of those groups to {!r}...\n'.format(args.adconnection_alias))
		lo, po = univention.admin.uldap.getAdminConnection()
		for dn in sorted(groups.keys()):
			attr = groups[dn]
			print('Changing {} ({})...'.format(attr['cn'][0], dn))
			if not args.dryrun:
				lo.modify(dn, [('univentionOffice365ADConnectionAlias', None, args.adconnection_alias)])
	else:
		print('No groups found.')
	print('Finished migrating groups.\n')

	if args.dryrun:
		ids_file = os.path.join(conf_path, 'ids.json')
	else:
		ids_file = os.path.join(target_path, 'ids.json')
	with open(ids_file, 'rb') as fp:
		ids = json.load(fp)
		adconnection_id = ids['adconnection_id']

	ucrv_set = '{}{}={}'.format(adconnection_alias_ucrv, args.adconnection_alias, adconnection_id)
	print('Setting UCR {}...'.format(ucrv_set))
	if not args.dryrun:
		handler_set([ucrv_set])
	print('Restarting the univention-directory-listener...')
	if args.dryrun:
		res = 0
	else:
		res = subprocess.call('systemctl restart univention-directory-listener.service'.split())
	print('{}: Return value {!r} for "systemctl restart univention-directory-listener.service".'.format(
		'OK' if res == 0 else 'Error',
		res)
	)
	print('\nEnd of migration.\n')
