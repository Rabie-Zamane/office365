#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-
#
# Univention Office 365 - new tenant script
#
# Copyright 2017 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

import os
import pwd
import sys
import shutil
import argparse
import subprocess
from univention.config_registry import ConfigRegistry, handler_set
from univention.office365.azure_auth import AzureAuth, get_tenant_aliases, tenant_alias_ucrv, tenant_wizard_ucrv


conf_path = '/etc/univention-office365'
ucr = ConfigRegistry()
ucr.load()

if __name__ == '__main__':
	parser = argparse.ArgumentParser(
		description='Create a new tenant configuration for the office 365 connector.',
	)
	parser.add_argument('tenant_alias', help='Unique tenant alias name (without spaces). Must not be listed in UCR {}.'.format(tenant_alias_ucrv))
	parser.add_argument('--dryrun', help='Simulate the migration, but don\'t actually change anything [default off].', action='store_true')
	args = parser.parse_args()

	aliases = get_tenant_aliases()
	if args.tenant_alias in aliases:
		print('Error: Tenant alias {!r} is already listed in UCR {!r}. Exiting.'.format(args.tenant_alias, tenant_alias_ucrv))
		sys.exit(1)

	target_path = os.path.join(conf_path, args.tenant_alias)
	if os.path.exists(target_path):
		print('Error: Path {!r} already exists. Exiting.'.format(target_path))
		sys.exit(1)

	if args.dryrun:
		print('Dry run - no changes will be applied.')

	print('Creating directory {!r}...'.format(target_path))
	if not args.dryrun:
		os.mkdir(target_path, 0o700)
	print('Setting permissions on {!r}...'.format(target_path))
	if not args.dryrun:
		os.chown(target_path, pwd.getpwnam('listener').pw_uid, 0)
	for filename in ('cert.fp', 'cert.pem', 'key.pem'):
		src = os.path.join(conf_path, filename)
		print('Copying {!r} to {!r}...'.format(src, target_path))
		if not args.dryrun:
			shutil.copy2(src, target_path)
			os.chown(os.path.join(target_path, filename), pwd.getpwnam('listener').pw_uid, 0)
	print('Setting directory to not be initialed...')
	if not args.dryrun:
		AzureAuth.uninitialize(args.tenant_alias)

	ucrv_set = '{}={}'.format(tenant_wizard_ucrv, args.tenant_alias)
	print('Setting UCR {}...'.format(ucrv_set))
	if not args.dryrun:
		handler_set([ucrv_set])
		subprocess.call(['pkill', '-f', '/usr/sbin/univention-management-console-module -m office365'])
	print('Finished. Please run the wizard now.\n')
